#!/usr/bin/env python
"Visualize delays between frames and frame drops."
import pickle
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path


class Timestamps:
    def __init__(self, path, config):
        self.name = path.stem
        self.path = path
        self.config = config
        self.cam = path.parent.name
        self.dict = {}
        self.loss = 0

        self.index = []
        self.raw_times = []
        self.deltas = []
        self.deviation = []

        self.load()
        self.get_delays()
        self.process()

    def plot(self):
        _, ax = plt.subplots()
        ax.plot(self.frames, self.times)
        ax.set_xlabel("Frames")
        ax.set_ylabel("Time")
        ax.legend(self.path.stem)
        return ax

    def process(self):
        self.t0 = sorted(self.dict.values())[0]
        self.tn = sorted(self.dict.values())[-1]
        self.total_duration = self.tn - self.t0
        self.excess_duration = self.total_duration - self.expected_duration
        t_last = self.t0 
        t_last_plus_delay = t_last
        
        for index, time in self.dict.items():
            self.index.append(index)
            self.raw_times.append(time - self.t0)
            self.deltas.append(time - t_last)
            self.deviation.append(time - t_last_plus_delay)

            t_last = time 
            t_last_plus_delay = t_last + self.expected_interframe_delay

    def get_delays(self):
        trigger = config["tiscam"]["properties"]["common"]["Trigger Mode"]
        frequency = config["pwm"]["frequency"] if trigger else config["tiscam"]["caps"]["common"]["framerate"]
        chunk_size = config["pwm"]["chunk_size"] if trigger else len(self.dict) -1
        # self.expected_interframe_delay = 1 / frequency
        # self.expected_duration = chunk_size / frequency
        self.expected_interframe_delay = 1 / self.framerate
        self.expected_duration = chunk_size / self.framerate
        self.expected_pause_length = config["pwm"]["chunk_pause"] / 1000 if trigger else 0
        
        t = 0
        self.ideal_times = []
        for i in range(len(self.dict)):
            self.ideal_times.append(t)
            t += self.expected_interframe_delay


    def load(self):
        with open(self.path, 'rb') as handle:
            self.dict = pickle.load(handle)
            self.loss = self.dict.pop("loss")
        try:
            self.framerate = self.dict.pop("framerate")
        except Exception:
            print("no framerate in " + self.name)


if __name__ == "__main__":
    import argparse
    from tiscam.config import read_config

    def get_all_chunks(cam):
        return sorted(cam.glob("*.pickle"))

    parser = argparse.ArgumentParser(__doc__)
    parser.add_argument("-p", "--path",
                        help="Path to the directory containg the cameras",
                        dest="path", default="~/data", 
                        type=lambda x: Path(x).expanduser().absolute())
    parser.add_argument("-c", "--config",
                        help="Path to config.toml",
                        dest="config_path", default="config.toml", 
                        type=lambda x: Path(x).expanduser().absolute())
    parser.add_argument("--cam-prefix",
                        help="Prefix of directories for each cam (ex. [cam]1, [cam]2)",
                        dest="prefix", default="cam")
    parser.add_argument("-i", "--ignore-last",
                        help="Whether to ignore the last pickle file",
                        dest="ignore_last", action="store_true")


    args = parser.parse_args()
    path = args.path
    prefix = args.prefix
    config = read_config(args.config_path)
    ignore_last = args.ignore_last



    camera_all = sorted(path.glob(f"{prefix}*"))

    def plot_deviation(camera_all, ignore_last):
        fig, _ = plt.subplots(len(camera_all)*2)

        i = 0
        for camera in camera_all:
            ax = fig.axes[i]
            ax.set_title(f"Camera {camera}")
            ax.set_xlabel("Frame #")
            ax.set_ylabel("Delta (s)")

            ax2 = fig.axes[i+1]
            ax2.set_title(f"Camera {camera}")
            ax2.set_xlabel("Frame #")
            ax2.set_ylabel("Delta (s)")

            total_loss = 0
            chunk_all = get_all_chunks(camera)
            if ignore_last:
                chunk_all.pop()
            last_t = 0
            for chunk in chunk_all:
                timestamps = Timestamps(chunk, config)
                x_axis = timestamps.index
                y_axis = timestamps.deviation

                total_loss += timestamps.loss
                ax.plot(x_axis, y_axis, label=f"Loss: {timestamps.loss} - " +
                                              f"Excess: {timestamps.excess_duration :.2f} ({timestamps.excess_duration / timestamps.expected_interframe_delay :.2f} frames) - " +
                                              f"Pause excess: {timestamps.t0 - last_t - timestamps.expected_pause_length :.2f}")
                ax.hlines(timestamps.expected_interframe_delay, x_axis[0], x_axis[-1], color='r', linewidth=0.2)
                ax2.plot(x_axis, np.cumsum(y_axis))
                last_t = timestamps.tn
            box = ax.get_position()
            ax.set_position([box.x0, box.y0, box.width * 0.7, box.height])
            ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
            i+=2



        plt.subplots_adjust(hspace = 0.7, right=0.57, left=0.075)
        plt.show()

    plot_deviation(camera_all, ignore_last)
